/*
 * This file is generated by jOOQ.
 */
package org.example.spring.tutorial.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.example.spring.tutorial.generated.Keys;
import org.example.spring.tutorial.generated.Public;
import org.example.spring.tutorial.generated.tables.records.ServicesRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Services extends TableImpl<ServicesRecord> {

    private static final long serialVersionUID = 871099984;

    /**
     * The reference instance of <code>public.services</code>
     */
    public static final Services SERVICES = new Services();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServicesRecord> getRecordType() {
        return ServicesRecord.class;
    }

    /**
     * The column <code>public.services.id</code>.
     */
    public final TableField<ServicesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('services_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.services.idd</code>.
     */
    public final TableField<ServicesRecord, Integer> IDD = createField(DSL.name("idd"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.services.number</code>.
     */
    public final TableField<ServicesRecord, Integer> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.services.service_name</code>.
     */
    public final TableField<ServicesRecord, String> SERVICE_NAME = createField(DSL.name("service_name"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.services.type_of_service_id</code>.
     */
    public final TableField<ServicesRecord, Integer> TYPE_OF_SERVICE_ID = createField(DSL.name("type_of_service_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.services.price</code>.
     */
    public final TableField<ServicesRecord, String> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.services.discount</code>.
     */
    public final TableField<ServicesRecord, Integer> DISCOUNT = createField(DSL.name("discount"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.services.create_date</code>.
     */
    public final TableField<ServicesRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.services.delete_date</code>.
     */
    public final TableField<ServicesRecord, LocalDateTime> DELETE_DATE = createField(DSL.name("delete_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>public.services</code> table reference
     */
    public Services() {
        this(DSL.name("services"), null);
    }

    /**
     * Create an aliased <code>public.services</code> table reference
     */
    public Services(String alias) {
        this(DSL.name(alias), SERVICES);
    }

    /**
     * Create an aliased <code>public.services</code> table reference
     */
    public Services(Name alias) {
        this(alias, SERVICES);
    }

    private Services(Name alias, Table<ServicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Services(Name alias, Table<ServicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Services(Table<O> child, ForeignKey<O, ServicesRecord> key) {
        super(child, key, SERVICES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ServicesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SERVICES;
    }

    @Override
    public UniqueKey<ServicesRecord> getPrimaryKey() {
        return Keys.PK_SERVICES_ID;
    }

    @Override
    public List<UniqueKey<ServicesRecord>> getKeys() {
        return Arrays.<UniqueKey<ServicesRecord>>asList(Keys.PK_SERVICES_ID, Keys.SERVICES_IDD_KEY, Keys.SERVICES_NUMBER_KEY);
    }

    @Override
    public List<ForeignKey<ServicesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ServicesRecord, ?>>asList(Keys.SERVICES__FK_SERVICES_NAME_OF_SERVICE);
    }

    public NameOfService nameOfService() {
        return new NameOfService(this, Keys.SERVICES__FK_SERVICES_NAME_OF_SERVICE);
    }

    @Override
    public Services as(String alias) {
        return new Services(DSL.name(alias), this);
    }

    @Override
    public Services as(Name alias) {
        return new Services(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Services rename(String name) {
        return new Services(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Services rename(Name name) {
        return new Services(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, Integer, String, Integer, String, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
