/*
 * This file is generated by jOOQ.
 */
package org.example.spring.tutorial.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import org.example.spring.tutorial.generated.tables.Patients;
import org.example.spring.tutorial.generated.tables.records.PatientsRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class PatientsDao extends DAOImpl<PatientsRecord, org.example.spring.tutorial.generated.tables.pojos.Patients, Integer> {

    /**
     * Create a new PatientsDao without any configuration
     */
    public PatientsDao() {
        super(Patients.PATIENTS, org.example.spring.tutorial.generated.tables.pojos.Patients.class);
    }

    /**
     * Create a new PatientsDao with an attached configuration
     */
    @Autowired
    public PatientsDao(Configuration configuration) {
        super(Patients.PATIENTS, org.example.spring.tutorial.generated.tables.pojos.Patients.class, configuration);
    }

    @Override
    public Integer getId(org.example.spring.tutorial.generated.tables.pojos.Patients object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Patients.PATIENTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchById(Integer... values) {
        return fetch(Patients.PATIENTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.example.spring.tutorial.generated.tables.pojos.Patients fetchOneById(Integer value) {
        return fetchOne(Patients.PATIENTS.ID, value);
    }

    /**
     * Fetch records that have <code>idd BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchRangeOfIdd(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Patients.PATIENTS.IDD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>idd IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchByIdd(Integer... values) {
        return fetch(Patients.PATIENTS.IDD, values);
    }

    /**
     * Fetch a unique record that has <code>idd = value</code>
     */
    public org.example.spring.tutorial.generated.tables.pojos.Patients fetchOneByIdd(Integer value) {
        return fetchOne(Patients.PATIENTS.IDD, value);
    }

    /**
     * Fetch records that have <code>card_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchRangeOfCardNumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Patients.PATIENTS.CARD_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>card_number IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchByCardNumber(Integer... values) {
        return fetch(Patients.PATIENTS.CARD_NUMBER, values);
    }

    /**
     * Fetch a unique record that has <code>card_number = value</code>
     */
    public org.example.spring.tutorial.generated.tables.pojos.Patients fetchOneByCardNumber(Integer value) {
        return fetchOne(Patients.PATIENTS.CARD_NUMBER, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Patients.PATIENTS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchByName(String... values) {
        return fetch(Patients.PATIENTS.NAME, values);
    }

    /**
     * Fetch records that have <code>age BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchRangeOfAge(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Patients.PATIENTS.AGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>age IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchByAge(Integer... values) {
        return fetch(Patients.PATIENTS.AGE, values);
    }

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchRangeOfAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(Patients.PATIENTS.ADDRESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchByAddress(String... values) {
        return fetch(Patients.PATIENTS.ADDRESS, values);
    }

    /**
     * Fetch records that have <code>insurance_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchRangeOfInsuranceNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Patients.PATIENTS.INSURANCE_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>insurance_number IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchByInsuranceNumber(String... values) {
        return fetch(Patients.PATIENTS.INSURANCE_NUMBER, values);
    }

    /**
     * Fetch records that have <code>phone_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchRangeOfPhoneNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Patients.PATIENTS.PHONE_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone_number IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchByPhoneNumber(String... values) {
        return fetch(Patients.PATIENTS.PHONE_NUMBER, values);
    }

    /**
     * Fetch records that have <code>create_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchRangeOfCreateDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Patients.PATIENTS.CREATE_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_date IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchByCreateDate(LocalDateTime... values) {
        return fetch(Patients.PATIENTS.CREATE_DATE, values);
    }

    /**
     * Fetch records that have <code>delete_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchRangeOfDeleteDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Patients.PATIENTS.DELETE_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_date IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Patients> fetchByDeleteDate(LocalDateTime... values) {
        return fetch(Patients.PATIENTS.DELETE_DATE, values);
    }
}
