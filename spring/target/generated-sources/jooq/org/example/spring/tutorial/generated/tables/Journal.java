/*
 * This file is generated by jOOQ.
 */
package org.example.spring.tutorial.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.example.spring.tutorial.generated.Keys;
import org.example.spring.tutorial.generated.Public;
import org.example.spring.tutorial.generated.tables.records.JournalRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Journal extends TableImpl<JournalRecord> {

    private static final long serialVersionUID = 473391296;

    /**
     * The reference instance of <code>public.journal</code>
     */
    public static final Journal JOURNAL = new Journal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JournalRecord> getRecordType() {
        return JournalRecord.class;
    }

    /**
     * The column <code>public.journal.id</code>.
     */
    public final TableField<JournalRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('journal_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.journal.idd</code>.
     */
    public final TableField<JournalRecord, Integer> IDD = createField(DSL.name("idd"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.journal.date_of_receipt</code>.
     */
    public final TableField<JournalRecord, String> DATE_OF_RECEIPT = createField(DSL.name("date_of_receipt"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.journal.card_number_id</code>.
     */
    public final TableField<JournalRecord, Integer> CARD_NUMBER_ID = createField(DSL.name("card_number_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.journal.patient_name</code>.
     */
    public final TableField<JournalRecord, String> PATIENT_NAME = createField(DSL.name("patient_name"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.journal.doctor_name_id</code>.
     */
    public final TableField<JournalRecord, Integer> DOCTOR_NAME_ID = createField(DSL.name("doctor_name_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.journal.doctor_post</code>.
     */
    public final TableField<JournalRecord, Integer> DOCTOR_POST = createField(DSL.name("doctor_post"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.journal.service_id</code>.
     */
    public final TableField<JournalRecord, Integer> SERVICE_ID = createField(DSL.name("service_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.journal.quantity</code>.
     */
    public final TableField<JournalRecord, Integer> QUANTITY = createField(DSL.name("quantity"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.journal.create_date</code>.
     */
    public final TableField<JournalRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.journal.delete_date</code>.
     */
    public final TableField<JournalRecord, LocalDateTime> DELETE_DATE = createField(DSL.name("delete_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>public.journal</code> table reference
     */
    public Journal() {
        this(DSL.name("journal"), null);
    }

    /**
     * Create an aliased <code>public.journal</code> table reference
     */
    public Journal(String alias) {
        this(DSL.name(alias), JOURNAL);
    }

    /**
     * Create an aliased <code>public.journal</code> table reference
     */
    public Journal(Name alias) {
        this(alias, JOURNAL);
    }

    private Journal(Name alias, Table<JournalRecord> aliased) {
        this(alias, aliased, null);
    }

    private Journal(Name alias, Table<JournalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Journal(Table<O> child, ForeignKey<O, JournalRecord> key) {
        super(child, key, JOURNAL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<JournalRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JOURNAL;
    }

    @Override
    public UniqueKey<JournalRecord> getPrimaryKey() {
        return Keys.PK_JOURNAL_ID;
    }

    @Override
    public List<UniqueKey<JournalRecord>> getKeys() {
        return Arrays.<UniqueKey<JournalRecord>>asList(Keys.PK_JOURNAL_ID, Keys.JOURNAL_IDD_KEY);
    }

    @Override
    public List<ForeignKey<JournalRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JournalRecord, ?>>asList(Keys.JOURNAL__FK_JOURNAL_PATIENT, Keys.JOURNAL__FK_JOURNAL_DOCTORS_NAME, Keys.JOURNAL__FK_JOURNAL_SERVICES);
    }

    public Patients patients() {
        return new Patients(this, Keys.JOURNAL__FK_JOURNAL_PATIENT);
    }

    public Doctors doctors() {
        return new Doctors(this, Keys.JOURNAL__FK_JOURNAL_DOCTORS_NAME);
    }

    public Services services() {
        return new Services(this, Keys.JOURNAL__FK_JOURNAL_SERVICES);
    }

    @Override
    public Journal as(String alias) {
        return new Journal(DSL.name(alias), this);
    }

    @Override
    public Journal as(Name alias) {
        return new Journal(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Journal rename(String name) {
        return new Journal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Journal rename(Name name) {
        return new Journal(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, String, Integer, String, Integer, Integer, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
