/*
 * This file is generated by jOOQ.
 */
package org.example.spring.tutorial.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import org.example.spring.tutorial.generated.tables.NameOfPosition;
import org.example.spring.tutorial.generated.tables.records.NameOfPositionRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class NameOfPositionDao extends DAOImpl<NameOfPositionRecord, org.example.spring.tutorial.generated.tables.pojos.NameOfPosition, Integer> {

    /**
     * Create a new NameOfPositionDao without any configuration
     */
    public NameOfPositionDao() {
        super(NameOfPosition.NAME_OF_POSITION, org.example.spring.tutorial.generated.tables.pojos.NameOfPosition.class);
    }

    /**
     * Create a new NameOfPositionDao with an attached configuration
     */
    @Autowired
    public NameOfPositionDao(Configuration configuration) {
        super(NameOfPosition.NAME_OF_POSITION, org.example.spring.tutorial.generated.tables.pojos.NameOfPosition.class, configuration);
    }

    @Override
    public Integer getId(org.example.spring.tutorial.generated.tables.pojos.NameOfPosition object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(NameOfPosition.NAME_OF_POSITION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchById(Integer... values) {
        return fetch(NameOfPosition.NAME_OF_POSITION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.example.spring.tutorial.generated.tables.pojos.NameOfPosition fetchOneById(Integer value) {
        return fetchOne(NameOfPosition.NAME_OF_POSITION.ID, value);
    }

    /**
     * Fetch records that have <code>idd BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchRangeOfIdd(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(NameOfPosition.NAME_OF_POSITION.IDD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>idd IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchByIdd(Integer... values) {
        return fetch(NameOfPosition.NAME_OF_POSITION.IDD, values);
    }

    /**
     * Fetch a unique record that has <code>idd = value</code>
     */
    public org.example.spring.tutorial.generated.tables.pojos.NameOfPosition fetchOneByIdd(Integer value) {
        return fetchOne(NameOfPosition.NAME_OF_POSITION.IDD, value);
    }

    /**
     * Fetch records that have <code>position BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchRangeOfPosition(String lowerInclusive, String upperInclusive) {
        return fetchRange(NameOfPosition.NAME_OF_POSITION.POSITION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>position IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchByPosition(String... values) {
        return fetch(NameOfPosition.NAME_OF_POSITION.POSITION, values);
    }

    /**
     * Fetch records that have <code>salary BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchRangeOfSalary(String lowerInclusive, String upperInclusive) {
        return fetchRange(NameOfPosition.NAME_OF_POSITION.SALARY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>salary IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchBySalary(String... values) {
        return fetch(NameOfPosition.NAME_OF_POSITION.SALARY, values);
    }

    /**
     * Fetch records that have <code>premium BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchRangeOfPremium(String lowerInclusive, String upperInclusive) {
        return fetchRange(NameOfPosition.NAME_OF_POSITION.PREMIUM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>premium IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchByPremium(String... values) {
        return fetch(NameOfPosition.NAME_OF_POSITION.PREMIUM, values);
    }

    /**
     * Fetch records that have <code>create_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchRangeOfCreateDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(NameOfPosition.NAME_OF_POSITION.CREATE_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_date IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchByCreateDate(LocalDateTime... values) {
        return fetch(NameOfPosition.NAME_OF_POSITION.CREATE_DATE, values);
    }

    /**
     * Fetch records that have <code>delete_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchRangeOfDeleteDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(NameOfPosition.NAME_OF_POSITION.DELETE_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_date IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.NameOfPosition> fetchByDeleteDate(LocalDateTime... values) {
        return fetch(NameOfPosition.NAME_OF_POSITION.DELETE_DATE, values);
    }
}
