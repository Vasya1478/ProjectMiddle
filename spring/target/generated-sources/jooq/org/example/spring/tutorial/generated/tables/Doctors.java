/*
 * This file is generated by jOOQ.
 */
package org.example.spring.tutorial.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.example.spring.tutorial.generated.Keys;
import org.example.spring.tutorial.generated.Public;
import org.example.spring.tutorial.generated.tables.records.DoctorsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Doctors extends TableImpl<DoctorsRecord> {

    private static final long serialVersionUID = 515734887;

    /**
     * The reference instance of <code>public.doctors</code>
     */
    public static final Doctors DOCTORS = new Doctors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DoctorsRecord> getRecordType() {
        return DoctorsRecord.class;
    }

    /**
     * The column <code>public.doctors.id</code>.
     */
    public final TableField<DoctorsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('doctors_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.doctors.idd</code>.
     */
    public final TableField<DoctorsRecord, Integer> IDD = createField(DSL.name("idd"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.doctors.employee_code</code>.
     */
    public final TableField<DoctorsRecord, Integer> EMPLOYEE_CODE = createField(DSL.name("employee_code"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.doctors.name</code>.
     */
    public final TableField<DoctorsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.doctors.position_id</code>.
     */
    public final TableField<DoctorsRecord, Integer> POSITION_ID = createField(DSL.name("position_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.doctors.cabinet_number</code>.
     */
    public final TableField<DoctorsRecord, Integer> CABINET_NUMBER = createField(DSL.name("cabinet_number"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.doctors.time_of_receipt_id</code>.
     */
    public final TableField<DoctorsRecord, Integer> TIME_OF_RECEIPT_ID = createField(DSL.name("time_of_receipt_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.doctors.type_of_service_id</code>.
     */
    public final TableField<DoctorsRecord, Integer> TYPE_OF_SERVICE_ID = createField(DSL.name("type_of_service_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.doctors.create_date</code>.
     */
    public final TableField<DoctorsRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.doctors.delete_date</code>.
     */
    public final TableField<DoctorsRecord, LocalDateTime> DELETE_DATE = createField(DSL.name("delete_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>public.doctors</code> table reference
     */
    public Doctors() {
        this(DSL.name("doctors"), null);
    }

    /**
     * Create an aliased <code>public.doctors</code> table reference
     */
    public Doctors(String alias) {
        this(DSL.name(alias), DOCTORS);
    }

    /**
     * Create an aliased <code>public.doctors</code> table reference
     */
    public Doctors(Name alias) {
        this(alias, DOCTORS);
    }

    private Doctors(Name alias, Table<DoctorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Doctors(Name alias, Table<DoctorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Doctors(Table<O> child, ForeignKey<O, DoctorsRecord> key) {
        super(child, key, DOCTORS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<DoctorsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DOCTORS;
    }

    @Override
    public UniqueKey<DoctorsRecord> getPrimaryKey() {
        return Keys.PK_DOCTORS_ID;
    }

    @Override
    public List<UniqueKey<DoctorsRecord>> getKeys() {
        return Arrays.<UniqueKey<DoctorsRecord>>asList(Keys.PK_DOCTORS_ID, Keys.DOCTORS_IDD_KEY, Keys.DOCTORS_EMPLOYEE_CODE_KEY);
    }

    @Override
    public List<ForeignKey<DoctorsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DoctorsRecord, ?>>asList(Keys.DOCTORS__FK_DOCTORS_NAME_OF_POSITION, Keys.DOCTORS__FK_DOCTORS_SCHEDULE, Keys.DOCTORS__FK_DOCTORS_NAME_OF_SERVICE);
    }

    public NameOfPosition nameOfPosition() {
        return new NameOfPosition(this, Keys.DOCTORS__FK_DOCTORS_NAME_OF_POSITION);
    }

    public Schedule schedule() {
        return new Schedule(this, Keys.DOCTORS__FK_DOCTORS_SCHEDULE);
    }

    public NameOfService nameOfService() {
        return new NameOfService(this, Keys.DOCTORS__FK_DOCTORS_NAME_OF_SERVICE);
    }

    @Override
    public Doctors as(String alias) {
        return new Doctors(DSL.name(alias), this);
    }

    @Override
    public Doctors as(Name alias) {
        return new Doctors(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Doctors rename(String name) {
        return new Doctors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Doctors rename(Name name) {
        return new Doctors(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, Integer, String, Integer, Integer, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
