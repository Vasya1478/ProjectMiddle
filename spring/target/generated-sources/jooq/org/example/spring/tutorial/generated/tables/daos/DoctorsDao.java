/*
 * This file is generated by jOOQ.
 */
package org.example.spring.tutorial.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import org.example.spring.tutorial.generated.tables.Doctors;
import org.example.spring.tutorial.generated.tables.records.DoctorsRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class DoctorsDao extends DAOImpl<DoctorsRecord, org.example.spring.tutorial.generated.tables.pojos.Doctors, Integer> {

    /**
     * Create a new DoctorsDao without any configuration
     */
    public DoctorsDao() {
        super(Doctors.DOCTORS, org.example.spring.tutorial.generated.tables.pojos.Doctors.class);
    }

    /**
     * Create a new DoctorsDao with an attached configuration
     */
    @Autowired
    public DoctorsDao(Configuration configuration) {
        super(Doctors.DOCTORS, org.example.spring.tutorial.generated.tables.pojos.Doctors.class, configuration);
    }

    @Override
    public Integer getId(org.example.spring.tutorial.generated.tables.pojos.Doctors object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Doctors.DOCTORS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchById(Integer... values) {
        return fetch(Doctors.DOCTORS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.example.spring.tutorial.generated.tables.pojos.Doctors fetchOneById(Integer value) {
        return fetchOne(Doctors.DOCTORS.ID, value);
    }

    /**
     * Fetch records that have <code>idd BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchRangeOfIdd(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Doctors.DOCTORS.IDD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>idd IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchByIdd(Integer... values) {
        return fetch(Doctors.DOCTORS.IDD, values);
    }

    /**
     * Fetch a unique record that has <code>idd = value</code>
     */
    public org.example.spring.tutorial.generated.tables.pojos.Doctors fetchOneByIdd(Integer value) {
        return fetchOne(Doctors.DOCTORS.IDD, value);
    }

    /**
     * Fetch records that have <code>employee_code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchRangeOfEmployeeCode(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Doctors.DOCTORS.EMPLOYEE_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>employee_code IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchByEmployeeCode(Integer... values) {
        return fetch(Doctors.DOCTORS.EMPLOYEE_CODE, values);
    }

    /**
     * Fetch a unique record that has <code>employee_code = value</code>
     */
    public org.example.spring.tutorial.generated.tables.pojos.Doctors fetchOneByEmployeeCode(Integer value) {
        return fetchOne(Doctors.DOCTORS.EMPLOYEE_CODE, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Doctors.DOCTORS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchByName(String... values) {
        return fetch(Doctors.DOCTORS.NAME, values);
    }

    /**
     * Fetch records that have <code>position_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchRangeOfPositionId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Doctors.DOCTORS.POSITION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>position_id IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchByPositionId(Integer... values) {
        return fetch(Doctors.DOCTORS.POSITION_ID, values);
    }

    /**
     * Fetch records that have <code>cabinet_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchRangeOfCabinetNumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Doctors.DOCTORS.CABINET_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cabinet_number IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchByCabinetNumber(Integer... values) {
        return fetch(Doctors.DOCTORS.CABINET_NUMBER, values);
    }

    /**
     * Fetch records that have <code>time_of_receipt_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchRangeOfTimeOfReceiptId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Doctors.DOCTORS.TIME_OF_RECEIPT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>time_of_receipt_id IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchByTimeOfReceiptId(Integer... values) {
        return fetch(Doctors.DOCTORS.TIME_OF_RECEIPT_ID, values);
    }

    /**
     * Fetch records that have <code>type_of_service_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchRangeOfTypeOfServiceId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Doctors.DOCTORS.TYPE_OF_SERVICE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type_of_service_id IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchByTypeOfServiceId(Integer... values) {
        return fetch(Doctors.DOCTORS.TYPE_OF_SERVICE_ID, values);
    }

    /**
     * Fetch records that have <code>create_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchRangeOfCreateDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Doctors.DOCTORS.CREATE_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_date IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchByCreateDate(LocalDateTime... values) {
        return fetch(Doctors.DOCTORS.CREATE_DATE, values);
    }

    /**
     * Fetch records that have <code>delete_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchRangeOfDeleteDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Doctors.DOCTORS.DELETE_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_date IN (values)</code>
     */
    public List<org.example.spring.tutorial.generated.tables.pojos.Doctors> fetchByDeleteDate(LocalDateTime... values) {
        return fetch(Doctors.DOCTORS.DELETE_DATE, values);
    }
}
